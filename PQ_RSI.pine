//@version=6
indicator("TurboRSI [PQ_MOD]", "TRSI [v0.1.8]")

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
// Inputs
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

var int shortlen = input.int(5, minval=1, title="Short Period")
var int longlen = input.int(20, minval=1, title="Long Period")
var int siglen = input.int(5, minval=1, title="Signal Line Period")

max = input.int(20,'Maximum Length')
min = input.int(10,'Minimum Length')

overbought = input.float(70,step=10)
oversold   = input.float(30,step=10)

enable_heatmap = input.bool(true, "Enable candle heatmap")

src = input(ohlc4)

smoothK = input.int(3, "K", minval=1)
lengthRSI = input.int(14, "RSI Length", minval=1)
lengthStoch = input.int(14, "Stochastic Length", minval=1)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
// Inputs
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
Length         = input.int(200, "Length")
heat_sensative = input.int(70, "Heat Sensitivity", step = 10)
show_line     = input.bool(true, "Show Regression Line?")
show_table = input.bool(false, "Show table")

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

rsi_avg_dn_css = input.color(color.new(#ff0000, 5),'Average RSI Gradient',group='Style',inline='inline1')
rsi_avg_up_css = input.color(color.new(#21f305, 5),'',group='Style',inline='inline1')

upper_css = input.color(color.new(#21f305, 5),'Upper Level',group='Style')
lower_css = input.color(color.new(#ff0000, 5),'Lower Level',group='Style')

ob_area = input.color(color.new(#0cb51a, 70),'Overbought Area',group='Style')
os_area = input.color(color.new(#ff1100, 70),'Oversold Area',group='Style')

t_color_overbuy = input.color(color.new(#26a69a, 0), "Overbought Color", group = 'Style')
t_color_oversell = input.color(color.new(#ef5350, 0), 'Oversold Color', group = 'Style')
t_bgcolor_overbuy = input.color(color.new(#26a69a, 80), 'Overbought Background', group = 'Style')
t_bgcolor_oversell = input.color(color.new(#ef5350, 80), 'Oversold Background', group = 'Style')

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

log_transform(value) =>
    dev = value - 50
    signedLog = dev >= 0 ? 50 * math.log(dev + 1) / math.log(51) : -50 * math.log(-dev + 1) / math.log(51)
    50 + signedLog

var float min_osc = na
var float max_osc = na

erg = ta.tsi(src, shortlen, longlen)
linearTSI = (erg + 1) / 2 * 100
logTSI    = log_transform(linearTSI)

sig = ta.ema(erg, siglen)
linearSig = (sig + 1) / 2 * 100
logSig    = log_transform(linearSig)

osc = erg - sig

min_osc := na(min_osc) ? osc : math.min(min_osc, osc)
max_osc := na(max_osc) ? osc : math.max(max_osc, osc)

// --- Normalizacja do przedziału [0,1] ---
normalize(value, min_val, max_val) =>
    max_val - min_val == 0 ? 0.5 : (value - min_val) / (max_val - min_val)

// --- Skalowanie do przedziału [0, 100] ---
norm_osc = normalize(osc, min_osc, max_osc)
scaled_osc = norm_osc * 100

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

N = max-min+1
diff = nz(src - src[1])

var num = array.new_float(N,0)
var den = array.new_float(N,0)

rsi1 = ta.rsi(src, lengthRSI)
k1 = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

k = 0
overbuy = 0
oversell = 0
avg = 0.
for i = min to max
    alpha = 1/i
    
    num_rma = alpha*diff + (1-alpha)*array.get(num,k)
    den_rma = alpha*math.abs(diff) + (1-alpha)*array.get(den,k)
    rsi = 50*num_rma/den_rma + 50
    avg += rsi
    
    overbuy := rsi > overbought ? overbuy + 1 : overbuy
    oversell := rsi < oversold ? oversell + 1 : oversell
    
    array.set(num,k,num_rma)
    array.set(den,k,den_rma)
    k += 1

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

avg_rsi = avg/N
buy_rsi_ma = 0.
sell_rsi_ma = 0.

buy_rsi_ma := nz(buy_rsi_ma[1] + overbuy/N*(avg_rsi - buy_rsi_ma[1]),avg_rsi) 
sell_rsi_ma := nz(sell_rsi_ma[1] + oversell/N*(avg_rsi - sell_rsi_ma[1]),avg_rsi) 

normalization(src, mean)=> 
    norm = (src - mean) / ta.stdev(src, 200)
    norm > 5 ? 5 : norm < -5 ? -5 : norm

rescale(_src, _oldMin, _oldMax, _newMin, _newMax) =>
    _newMin + (_newMax - _newMin) * (_src - _oldMin) / math.max(_oldMax - _oldMin, 10e-10)

Regression_Line(length) =>
    x  = bar_index
    y  = src
    x_ = ta.sma(x,length)
    y_ = ta.sma(y,length)
    mx = ta.stdev(x,length)
    my = ta.stdev(y,length)
    c  = ta.correlation(x,y,length)
    // -
    slope = c * (my/mx)
    inter = y_ - slope*x_
    // -
    x*slope + inter

Regression_Line = Regression_Line(Length)

// ————— Heat Map Color Bars
color_level = normalization(src - Regression_Line, 0)

color = color_level > 0 
 ? color.from_gradient(color_level, 0, ta.highest(color_level, heat_sensative), #c2af00, #d60000)
 : color.from_gradient(color_level, ta.lowest(color_level, heat_sensative), 0, color.rgb(0, 166, 188), #d0bb00)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

barcolor(enable_heatmap ? color : na)

// plot(logTSI, color=color.rgb(255, 255, 0, 25), title="Indicator", style = plot.style_circles)
// plot(logSig, color=color.rgb(0, 255, 251, 25), title="Signal", style =plot.style_circles)
// plot(scaled_osc, color=color.new(chart.fg_color, 65), style=plot.style_histogram, title="Oscillator")

// Plot of Regression_Line
plot(show_line ? Regression_Line : na, color = #ffffff66, linewidth = 1, style = plot.style_stepline_diamond, force_overlay = true)

var tb = table.new(position.top_right,2,2)
if barstate.islast
    table.cell(tb,0,1,str.tostring(overbuy/N*100,'#.###')+' %',text_color=t_color_overbuy,bgcolor=t_bgcolor_overbuy)
    table.cell(tb,1,1,str.tostring(oversell/N*100,'#.###')+' %',text_color=t_color_oversell,bgcolor=t_bgcolor_oversell)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

css = color.from_gradient(avg_rsi,sell_rsi_ma,buy_rsi_ma,rsi_avg_dn_css,rsi_avg_up_css)
plot(avg_rsi,'Average Multi Length RSI',color=css, linewidth = 3)
up = plot(buy_rsi_ma,'Upper Channel',color=upper_css)
dn = plot(sell_rsi_ma,'Lower Channel',color=lower_css)

per_over = plot(overbuy/N*100,'Overbought Area',color=color.new(ob_area,100),editable=false)
per_under = plot(100 - oversell/N*100,'Oversold Area',color=color.new(os_area,100),editable=false)
upper = plot(100,color=na,editable=false,display=display.none)
lower = plot(0,color=na,editable=false,display=display.none)

fill(per_over,lower,ob_area)
fill(upper,per_under,os_area)
fill(up,dn,color.new(css,90))

plot(k1, "K", color=color.new(chart.fg_color, 20), linewidth = 1)

color fgColor = color.new(chart.fg_color, 60)

h0 = hline(80, "Upper Band", color=fgColor, linestyle = hline.style_dotted)
hline(50, "Middle Band", color=fgColor, linestyle = hline.style_dotted)
h1 = hline(20, "Lower Band", color=fgColor, linestyle = hline.style_dotted)

if show_table
    tbl = table.new(position.bottom_center, 100, 5, force_overlay = true)

    for i = 0 to 29 by 1
        table.cell(tbl, i, 1, "", bgcolor = i < 15 ? color.from_gradient(i, 0, 15, color.aqua, color.yellow) : color.from_gradient(i, 15, 30, color.yellow, color.red))

    // Gauge point 
    g_p = rescale(color_level, -4, 5, 0, 30)

    // Summer Winter marks and gauge point
    table.cell(tbl, 0, 1, "❆", text_color = color.rgb(32, 91, 255), text_size = size.large, bgcolor = color.aqua)
    table.cell(tbl, 29, 1, "☀︎", text_color = color.rgb(255, 238, 0), text_size = size.large, bgcolor = color.red)

    table.cell(tbl, math.round(g_p < 0 ? 0 : g_p), 1, "", text_color = color.rgb(0, 0, 0), text_size = size.large, bgcolor = color)